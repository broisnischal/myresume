// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// enum UserStatus {
//   ACTIVE
//   INACTIVE
//   BANNED
// }

// enum UserType {
//   ADMIN
//   USER
//   PRO
//   FREE
// }

model User {
  id       String @id @default(uuid())
  email    String @unique
  nickname String
  tagline  String
  bio      String
  // usertype UserType @default(FREE)

  name       String?
  userImages Image        @relation(fields: [imageId], references: [id])
  imageId    String
  Session    Session[]
  Password   Password[]
  Role       Role?        @relation(fields: [roleId], references: [id])
  roleId     String?
  Connection Connection[]
  Resume     Resume[]
  Socials    Socials[]
}

model Works {
  id        String   @id @default(cuid())
  title     String
  company   String
  desc      String
  startDate DateTime
  endDate   DateTime
  resumeId  String?
  Resume    Resume?  @relation(fields: [resumeId], references: [id])

  @@index([resumeId])
}

model Skills {
  id       String  @id @default(cuid())
  name     String
  value    Int
  resumeId String?
  Resume   Resume? @relation(fields: [resumeId], references: [id])

  @@index([resumeId])
}

model Resume {
  id          String @id @default(uuid())
  title       String
  content     String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  public   Boolean @default(true)
  template Boolean @default(false)

  user     User       @relation(fields: [userId], references: [id])
  userId   String     @unique
  Settings Settings[]
  Works    Works[]
  Skills   Skills[]
}

model Settings {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resume   Resume @relation(fields: [resumeId], references: [id])
  resumeId String

  showExperience Boolean
  showSkills     Boolean
  showEducation  Boolean
  showProjects   Boolean
  showInterests  Boolean
}

model Socials {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  platform String
  url      String
}

model Image {
  id          String  @id @default(uuid())
  contentType String
  blob        Bytes
  alt         String?
  User        User[]
}

model Session {
  id             String   @id @default(uuid())
  expirationDate DateTime

  userAgent String
  address   String
  status    Boolean
  lastlogin DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}
