generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum UserType {
  SUPERADMIN
  ADMIN
  USER
  PRO
  FREE
}

enum THEME {
  DEFAULT
  LIGHT
  DARK
}

enum RESUMETYPE {
  BASIC // default
  PRO
  CODE
  EDITOR
  PREMIUM
}

model Tag {
  id   String @id @default(cuid())
  name String
  slug String @unique
}

model User {
  id               String  @id @default(uuid())
  email            String
  username         String  @unique
  avatar_url       String?
  location         String?
  twitter_username String?
  github_username  String?
  nickname         String?
  tagline          String?
  bio              String?
  name             String?
  website          String?
  github_bio       String?

  usertype    UserType     @default(FREE)
  userImages  Image?       @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imageId     String?
  session     Session[]
  password    Password?
  role        Role?        @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId      String?
  connection  Connection[]
  resume      Resume[]
  social      Socials[]
  confessions Confession[]
}

model Contact {
  id        String   @id @default(cuid())
  username  String?
  email     String?
  phone     String?
  address   String?
  website   String?
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experience {
  id        String  @id @default(cuid())
  title     String
  company   String
  location  String?
  desc      String
  startDate String
  endDate   String
  resumeId  String
  resume    Resume  @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId])
  @@map("Works")
}

model Refrences {
  id          String  @id @default(cuid())
  name        String
  company     String
  position    String
  location    String?
  contact     String
  description String
  portfolio   String?

  resumeId String
  resume   Resume @relation(fields: [resumeId], references: [id])
}

model Award {
  id          String  @id @default(cuid())
  title       String
  subtitle    String
  year        String
  description String?
  Resume      Resume? @relation(fields: [resumeId], references: [id])
  resumeId    String?
}

model Education {
  id        String   @id @default(cuid())
  title     String
  institute String
  field     String
  desc      String?
  startDate DateTime
  endDate   DateTime
  resumeId  String
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@index([resumeId])
}

enum EventAnalytics {
  RESUME_CLICK
  LINK_CLICK
  SOCIAL_CLICK
  PROFILE_VIEW
}

model Analytics {
  id     Int            @id @default(autoincrement())
  userId Int
  event  EventAnalytics

  count Int @default(0)

  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  resumeId  String?
  resume    Resume?  @relation(fields: [resumeId], references: [id])
}

model Projects {
  id    String   @id @default(cuid())
  title String
  desc  String
  url   String
  tag   String[]

  startDate DateTime
  endDate   DateTime
  resumeId  String?
  resume    Resume?  @relation(fields: [resumeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([resumeId])
}

enum SKILLTYPE {
  STACKS
  INTEREST
  HOBBY
  LANGUAGE
  OTHER
}

model Skills {
  id       String    @id @default(cuid())
  name     String
  value    Int
  type     SKILLTYPE
  resumeId String?
  resume   Resume?   @relation(fields: [resumeId], references: [id])

  @@index([resumeId])
}

model Resume {
  id String @id @default(uuid())

  name String
  slug String @unique

  title       String?
  content     String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  public   Boolean @default(true)
  template Boolean @default(false)

  theme      THEME      @default(DEFAULT)
  resumetype RESUMETYPE @default(BASIC)

  user       User         @relation(fields: [userId], references: [id])
  userId     String
  settings   Settings[]
  experience Experience[]
  skills     Skills[]
  projects   Projects[]

  education Education[]
  analytics Analytics[]
  refrences Refrences[]
  awards    Award[]
  Contact   Contact[]

  testimonials Testimonial[]
}

model Settings {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resume   Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  resumeId String

  showExperience Boolean
  showSkills     Boolean
  showEducation  Boolean
  showProjects   Boolean
  showInterests  Boolean
}

model Socials {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  platform String
  url      String
}

model Image {
  id          String        @id @default(uuid())
  contentType String
  blob        Bytes
  alt         String?
  User        User[]
  Testimonial Testimonial[]
}

model Session {
  id             String   @id @default(uuid())
  expirationDate DateTime

  userAgent String
  address   String
  status    Boolean
  lastlogin DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerId])
}

model NewsLetter {
  id    String @id @default(cuid())
  email String @unique

  subscribed Boolean @default(false)
  hash       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id      String @id @default(cuid())
  name    String
  title   String
  content String

  featured Boolean @default(false)

  image     Image?   @relation(fields: [imageId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageId   String?
  Resume    Resume?  @relation(fields: [resumeId], references: [id])
  resumeId  String?
}

model Confession {
  id String @id @default(cuid())

  subject String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
